* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

.grid-container {
    /* display: grid;     чтобы создать сетку грид-контейнеру надо написать свойство дисплэй грид */

    /* grid-template-columns: 200px 200px 200px;     - 3 колонки по 200px каждая, 
    колонки могут быть разного размере и в разных единицах измерения например: 20em 250px 200px или 50% 250px 200px */
    /* grid-template-columns: 20em 250px 200px; */
    /* grid-template-columns: 50% 250px 200px; */
    /* grid-template-rows: 60px 60px 60px;  - 3 строки по 60px каждая,
    получилась сетка с ячеками 60*200px но в грид-элементе написана высота 50px поэтому в сетке есть элемент и пустое место зазор, но сама сетка создана без зазоров */
    /* grid-template-columns: 200px 200px 300px; grid-template-rows: 60px 150px 60px;  - оптимизированно превращено в grid-template: 60px 150px 60px / 200px 200px 300px; */
    /* оптимизация: чтобы задавать колонки и строки вместо grid-template-columns и grid-template-rows можно использовать grid-template: rows / columns; например:  grid-template: 60px 150px 60px / 200px 200px 300px; */
    /* grid-template: 60px 150px 60px / 200px 200px 300px; - создать 3 строки 60-150-60 и 3 колонки 200-200-300 */
    /* 10 элемент вывалился из сетки так как я ввела 3 колонки и 3 строки - что с этим делать узнаю позже */
    /* грид-элементы иногда называют треками. трек - это такая область которая ограничена всеми линиями. */

    /* gap - свойство для создания разрывов между элементами сетки. [gap (гэп) - по-английски "разрыв"] - для создания расстояния между элементами, могут быть по горизонтали и по вертикали и задается свойством grid-column-gap: 20px;*/
    /* grid-column-gap: 20px;  - VScode зачеркивает это свойство! но оно работает.
    почему? некоторые свойства с течением времени меняются в css - это нормально когда технология только появилась в браузерах.
    если навести на свойство то вскод подсказывает: 
    - что это свойство делает
    - что это свойство уже было заменено и его необходимо НЕ использовать
    - написано на что это свойство было поменяно (replaced by "column-gap") 
    т.е. свойство grid-column-gap работает в браузерах, но использовать уже не нужно в проектах и поэтому ставим column-gap */
    /*column-gap: 20px;  - разрыв между колонками  */
    /*row-gap: 20px; - разрыв между строками  */
    /* оптимизация: объединение column-gap и row-gap просто в gap: 20px; (раньше использовалось grid-gap но устарело - это написано в документации https://developer.mozilla.org/ru/docs/Web/CSS/gap и используется только для совместимости) */
    /* как эта технология поддерживается в браузере? захожу на caniuse.com и пишу "css grid" - общая поддержка браузеров global примерно 96% */
    /* гриды - это НЕ замена флексам (это разные технологии)
    гриды могут выравнивать элементы 
    и флексы могут выравнивать элементы, 
    но в гридах можно создавать шаблоны для проектов.
    в одном проекте МОЖНО совмещать гриды и флексы.
    одна технология (скорей всего гриды) - будет формировать каркас проекта,
    другая технология (скорей всего флексы) - выравнивать некоторые элементы. 
    (? какая технология что позволяет - не поняла) 
    гриды - для чего-то большого например весь сайт или сложная секция, а флексы для чего-то маленького (неправильно использовать флексы для чего-то большого, а внутри для чего-то маленького гриды) */

 /* l.73 Снова про сетки и CSS grid    */
    /* display: grid;
    grid-template: 60px 150px 60px / 200px 200px 300px;
    gap: 20px; */
/* l.74 единица гибкости (fr) и repeat() */
/* новая единица измерения: fr - дробная единица гибкости. 1fr = 1 части доступного пространства (от ширины и высоты) */
/* гриды инструмент дающий  максимальную гибкость поэтому fr */
    width: 600px;
    height: 600px;
    display: grid;
    /* grid-template-columns: 1fr 1fr 1fr;  - делю width 600 на 3 одинаковые части 1/3 1/3 1//3 */
    /* grid-template-columns: 1fr 2fr 1fr; - делю width 600 на 3 части 25% 50% 25% */
    /* grid-template-rows: 1fr 1fr 1fr; - делю height 600 на 3 равные части но получается не по 200 так как есть десятый элемент минимальная высота которого вычитается и элементы получаются по 182,6 */
    /* может быть 1fr, 2fr и даже 0.5fr */
    /* grid-template-columns: 1fr 1fr 1fr; - оптимизация: */
    /* grid-template-columns: repeat(3, 1fr);  - повторить 3 раза по значению 1fr */
    /* grid-template-columns: repeat(7, 1fr);  - повторить 7 раз по значению 1fr */
    /* grid-template-columns: repeat(3, 1fr) 20px;  - 3 колонки одинаковых колонки по 193,33 и колонка на 20px т.е. 600-20=580/3=193,33 */
    /* grid-template-columns: repeat(3, 1fr) 20px 60px;  - 3 колонки одинаковых колонки по 173,33 и колонка на 20px и 60px т.е. 600-20-60=520/3=173,33 */
    /* grid-template-columns: repeat(3, 50px 1fr) 20px;  - 3 колонки одинаковых колонки по 50+143,33 и вконце колонка на 20px т.е. 600-170=430/3=143,33 */
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: 1fr 1fr 1fr;
    grid-auto-rows: 200px; /* неявные гриды, строки снизу, 10 эдемент */
    grid-auto-columns: 200px; /* неявные гриды, колонки справа, тут нет */
}

.grid-elem {
    /* height: 50px; */
    background-color: rgba(1, 1, 96, 1);
    color: #fff;
    line-height: 50px;
    text-align: center;
    font-size: 26px;
    border: 1px solid #000;
    border-radius: 4px;
}